{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","inputStyle","display","progressVal","lastProgress","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkProgress","setState","progressState","getButtonState","state","fileName","onClickFileSelect","fileinputRef","current","click","fileSelected","fullPath","value","undefined","alert","startIndex","indexOf","lastIndexOf","filename","substring","encrypt","password","prompt","key","i","length","charCodeAt","reader","FileReader","useFile","files","readAsArrayBuffer","onload","e","k","byteArray","Uint8Array","result","reverse","parseInt","output","Blob","type","window","open","URL","createObjectURL","decrypt","React","createRef","setInterval","react_default","a","createElement","className","rel","href","class","src","logo","alt","TextField_default","disabled","id","placeholder","margin","index_es","variant","color","onClick","ref","style","onChange","target","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2a7e117.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { Button, LinearProgress } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nconst inputStyle = {\n  display: 'none'\n}\n\nlet progressVal = 0;\nlet lastProgress = 0;\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      fileName: '',\n      password: '',\n      progressState: 0\n    }\n    this.fileinputRef = React.createRef();\n    window.setInterval(()=>{\n      this.checkProgress();\n    },250);\n  }\n\n  checkProgress = () => {\n    if(progressVal !== lastProgress){\n      lastProgress = progressVal;\n      this.setState({\n        progressState: lastProgress\n      });\n    }\n  }\n\n  getButtonState = () => {\n    if ( this.state.fileName === '') return true;\n    return false;\n  }\n\n  onClickFileSelect = () => {\n   this.fileinputRef.current.click();\n  }\n\n  fileSelected = () => {\n    progressVal = 0;\n    debugger;\n    let fullPath = this.fileinputRef.current.value;\n    if(fullPath === undefined) alert(\"Empty File! Please try again.\");\n    let startIndex = (fullPath.indexOf('\\\\') >= 0 ? fullPath.lastIndexOf('\\\\') : fullPath.lastIndexOf('/'));\n    let filename = fullPath.substring(startIndex);\n    if (filename.indexOf('\\\\') === 0 || filename.indexOf('/') === 0) {\n        filename = filename.substring(1);\n    }\n    this.setState({\n      fileName: filename,\n      progressState: 0\n    });\n  }\n\n  encrypt = () => {\n    progressVal = 0;\n\n    let password = prompt(\"Please enter secret key!\", \"\");\n    let key = 1;\n    for(let i = 0; i < password.length; i++){\n      key = key + password.charCodeAt(i); \n    }\n    while(key < 500) {\n      key = key + key;\n    }\n\n    // alert(this.fileinputRef.current.files[0].size);\n    let reader = new FileReader();\n    let useFile = this.fileinputRef.current.files[0];\n    reader.readAsArrayBuffer(useFile);\n    \n    reader.onload = (e) => {\n      let byteArray = new Uint8Array(reader.result);\n\n      byteArray.reverse();\n      let k;\n\n      for(let i = key; i < byteArray.length; i += key){\n        k = byteArray[i];\n        byteArray[i] = byteArray[i-key];\n        byteArray[i-key] = k; \n        progressVal = parseInt((i / byteArray.length) * 100);       \n      }\n\n      let output = new Blob([byteArray], {type: 'video/zim'});\n      window.open(URL.createObjectURL(output), 'one.mkv');\n    }\n\n    // reader.onprogress = (data) => {\n    //   if(data.lengthComputable){\n    //     progressVal = parseInt(((data.loaded/data.length) * 100), 10)\n    //   }\n    // }\n\n  }\n\n  decrypt = () => {\n    progressVal = 0;\n\n    let password = prompt(\"Please enter secret key!\", \"\");\n    let key = 1;\n    for(let i = 0; i < password.length; i++){\n      key = key + password.charCodeAt(i); \n    }\n    while(key < 500) {\n      key = key + key;\n    }\n\n    let reader = new FileReader();\n    let useFile = this.fileinputRef.current.files[0];\n    reader.readAsArrayBuffer(useFile);\n    \n    reader.onload = (e) => {\n      let byteArray = new Uint8Array(reader.result);\n\n      let k;\n\n      for(let i = byteArray.length - (byteArray.length%key); i >= 0; i -= key){\n        k = byteArray[i];\n        byteArray[i] = byteArray[i-key];\n        byteArray[i-key] = k;  \n        progressVal = parseInt(((byteArray.length - i) / byteArray.length ) * 100);      \n      }\n      byteArray.reverse();\n\n      let output = new Blob([byteArray], {type: 'video/mkv'});\n      window.open(URL.createObjectURL(output), 'one.mkv');\n    }\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\" />\n        <p class=\"title\">Offline Encrypter: Encrypt/Decrypt files with password!</p>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <TextField\n            disabled\n            id=\"filePath\"\n            value={this.state.fileName}\n            placeholder=\"File Path\"\n            margin=\"normal\"\n          />\n          <div className=\"button-common\">\n            <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            className=\"button-common\"\n            onClick={this.onClickFileSelect}\n            >\n            Select File\n            </Button>\n          </div>\n          <input id=\"file-input\" ref={this.fileinputRef} type=\"file\" style={inputStyle} onChange={this.fileSelected}/>\n          <div className=\"progressbar\">\n            <LinearProgress color=\"primary\" variant=\"determinate\" value={this.state.progressState } />\n          </div>\n          <div>\n            \n            <div className=\"combo-button\">\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\" \n                className=\"button-common\"\n                onClick={this.encrypt}\n                disabled={this.getButtonState()}\n              >\n                Encrypt File\n              </Button>\n            </div>\n            <div className=\"combo-button\">\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\" \n                className=\"button-common\"\n                onClick={this.decrypt}\n                disabled={this.getButtonState()}\n              >\n                Decrypt File\n              </Button>\n            </div>\n          </div>\n          \n          <a\n            className=\"App-link\"\n            href=\"http://github.com/triplemzim/encrypter\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Project link\n          </a>\n        </header>\n        <footer>\n          <a\n          className=\"Footer\"\n          href=\"https://www.linkedin.com/in/md-muhim-muktadir-khan-997956115\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n            Fun Tool by Md Muhim Muktadir Khan\n          </a>          \n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}